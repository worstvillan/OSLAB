alias currpid R0;
alias current_pte R1;

currpid=[SYSTEM_STATUS_TABLE+1];
multipush(BP);
current_pte=PROCESS_TABLE+currpid*16;
[current_pte+12]=SP%512;
[current_pte+14]=PTBR;
[current_pte+15]=PTLR;

alias counter R2;
alias newpid R3;
alias new_pte R4;
alias loop_counter R5;


// iterate through the process table starting from 1st entry of the current process to find process in ready/created state
counter = currpid+1;
newpid=0;
loop_counter=0;

while(loop_counter<17) do 
	new_pte=PROCESS_TABLE + counter*16;
	if([new_pte+4]==CREATED || [new_pte+4]==READY) then
		newpid=counter;
		break;
	endif;
	counter=counter+1;
	if(counter==16) then
		counter=0;
	endif;
	loop_counter=loop_counter+1;
endwhile;

// if no process is found, schedule the idle program
new_pte=PROCESS_TABLE+newpid*16;

// point 7
SP=[new_pte+11]*512+[new_pte+12];
//point 8
PTBR=[new_pte+14];
PTLR=[new_pte+15];

[SYSTEM_STATUS_TABLE+1]=newpid;

//point 10
if([new_pte+4]==CREATED) then
	SP=[new_pte+13];
	[new_pte+4]=RUNNING;
	[new_pte+9]=0;
	ireturn;
endif;

// set new process state as running
[new_pte+4]=RUNNING;

// restore BP of new process from top of it's kernel stack
multipop(BP);
return;
	

