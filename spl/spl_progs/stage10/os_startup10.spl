// loading library pages (STAGE 7)

loadi(63,13);
loadi(64,14);

loadi(65,7);
loadi(66,8);
loadi(22,35);
loadi(23,36);
loadi(2,15);
loadi(3,16);

// for timer from disk blocks 17, 18 to memory page 4,5 ( STAGE 8)
loadi(4,17);
loadi(5,18);



//for INT7 to write on terminal from blocks 29,30 to memory page 16,17 (STAGE 10)
loadi(16,29);
loadi(17,30);

PTBR=PAGE_TABLE_BASE;
PTLR=10; // 10 entries in page table of INIT or 10 pages in logical address space
// 2 for library,2 for heap, 4 for code, 2 for stack


// doing this for ABI == APPLICATION BINARY INTERFACE (library,heap,code(xexe format),stack)

// for LIBRARY where library is in page 0,1 in logical space

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// for HEAP where heap is in page 2,3 in logical space

[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// for CODE where code is in page 4,5,6,7 in logical space

[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// for stack where stack is in page 8,9 in logic space
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// stage 9: user area page is at 80 in physical page (since it is 1st free page)
[PROCESS_TABLE+11]=80;
// PID gets stored in page 0
[PROCESS_TABLE+1]=0;

//system status table
[SYSTEM_STATUS_TABLE+1]=0;


SP = 8*512;
[76*512] = [65*512+1];



ireturn;

