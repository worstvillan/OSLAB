loadi(63,13);   //load library code
loadi(64,14);

loadi(65,7);    //load INIT program
loadi(66,8);

loadi(22,35);   //load INT10 module
loadi(23,36);

loadi(2,15);    //load exception handler
loadi(3,16);

loadi(4,17);    //load timer interrupt
loadi(5,18);

loadi(16,29);   //INT7 for print
loadi(17,30);

//loadi(83,69);   //load executable file

//loadi(89,70);	//load second executable file

loadi(50, 63);  //MODULE_5
loadi(51, 64);

loadi(10, 23);	// INT 4
loadi(11, 24);

loadi(40, 53);	//MODULE_0
loadi(41, 54);

loadi(48, 61);	//MODULE_4
loadi(49, 62);

loadi(14,27);	//INT6 for read
loadi(15,28);

loadi(8,21);	//load console interrupt handler
loadi(9,22);

loadi(20,33);	//INT 9
loadi(21,34);

loadi(42,55);	//load module 1
loadi(43,56);

loadi(44,57);	//load module 2
loadi(45,58);

loadi(59,3);	// inode+user table
loadi(60,4);

loadi(6, 19); 	// load disk controller interrupt routine
loadi(7, 20);

loadi(61, 2);	// load disk free list

loadi(18,31);	//load INT8
loadi(19,32);

loadi(24,37);	//load INT11
loadi(25,38);

loadi(32,45);	//load INT15
loadi(33,46);

loadi(62, 5);  // root file

loadi(28, 41);	// load INT13
loadi(29, 42);

loadi(30, 43);	// load INT14
loadi(31, 44);

//initialise memory free list
alias i R1;
i = 0;

while(i<128) do
	if(i<=82) then
		[MEMORY_FREE_LIST+i] = 1;
	else
		[MEMORY_FREE_LIST+i] = 0;
	endif;
	i = i + 1;
endwhile;


i = 0;

while(i < 16) do
	[PROCESS_TABLE + i*16 + 4] = TERMINATED;
	i = i+1;
endwhile;

i = 0;

while(i < MAX_FILE_NUM) do
	[FILE_STATUS_TABLE + 4*i] = -1;
	[FILE_STATUS_TABLE + 4*i + 1] = -1;
	i = i+1;
endwhile;

i = 0;
while(i<MAX_BUFFER) do
	[BUFFER_TABLE + 4*i] = -1;	//block
	[BUFFER_TABLE + 4*i + 1] = 0;	//dirty
	[BUFFER_TABLE + 4*i + 2] = -1;	//locking PID
	i = i + 1;
endwhile;

[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;

[SYSTEM_STATUS_TABLE+3] = 0;	//wait_mem_count
[SYSTEM_STATUS_TABLE+2] = 45;	//mem_free_count


//initialise the semaphore table

alias j R1;
j = 0;

while(j < MAX_SEM_COUNT) do
	[SEMAPHORE_TABLE + 4*j] = -1;
	[SEMAPHORE_TABLE + 4*j + 1] = 0;
j = j+1;
endwhile;
//----------------------------------------SETTING PAGE TABLE FOR INIT-------------------------------------------

PTBR = PAGE_TABLE_BASE + 20;	// PTBR WILL HOLD THE BASE ADDRESS FOR IDLE.
PTLR = 10;

//LIBRARY
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";


//HEAP
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";


//CODE
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


//STACK
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


//----------------------------------------SETTING PROCESS TABLE FOR INIT---------------------------------------

[PROCESS_TABLE + 16 + 1] = 1;                      // PID      
[PROCESS_TABLE + 16 + 3] = 1;			   // USERID
[PROCESS_TABLE + 16 + 4] = CREATED;                // STATE
[PROCESS_TABLE + 16 + 11] = 80;                    // USER AREA PAGE NUMBER
[PROCESS_TABLE + 16 + 12] = 0;                     // KERNEL STACK PINTER
[PROCESS_TABLE + 16 + 13] = 8*512;                 // USER STACK POINTER
[PROCESS_TABLE + 16 + 14] = PTBR;                  // PTBR
[PROCESS_TABLE + 16 + 15] = PTLR;                  // PTLR

[76*512] = [65*512 + 1];	// ENTRY POINT FOR INIT PROCESS TO THE TOP OF USER STACK

// initialize per process resource table
alias i R1;
i = 496;

while(i <= 510) do
	[80*512+i] = -1;
	i = i+2;
endwhile;

// *** Initialization of Disk_Map_Table ***

i = 0;
while(i<10) do
	[DISK_MAP_TABLE + 10 + i] = -1;
	if(i==4) then
		[DISK_MAP_TABLE + 10 + i] = 7;
	endif;
	
	if(i==5) then
		[DISK_MAP_TABLE + 10 + i] = 8;
	endif;
	i = i + 1;
endwhile;

return ;			// RETURN BECAUSE WE ARE IN KERNEL MODES(NOT IRETURN)
