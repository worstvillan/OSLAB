alias functionNum R1;
alias curr_pid R2;

//for the Acquire Terminal

if(functionNum == ACQUIRE_TERMINAL) then
        while([TERMINAL_STATUS_TABLE] == 1) do  //CHECK IF TERMINAL IS ALREADY IN USE
                [PROCESS_TABLE + curr_pid*16 + 4] = WAIT_TERMINAL;
                backup;

                call MOD_5;     // SCHEDULER

                restore;
        endwhile;

        [TERMINAL_STATUS_TABLE] = 1;    //GIVE THE TERMINAL TO THIS PROCESS
        [TERMINAL_STATUS_TABLE + 1] = curr_pid;

        return ;

endif;

//for the release terminal

if(functionNum == RELEASE_TERMINAL) then
        if(curr_pid != [TERMINAL_STATUS_TABLE + 1]) then
                R0 = -1;        //return value is -1
                return;
        endif;

        [TERMINAL_STATUS_TABLE] = 0;

        alias i R7;
        i = 0;
        while(i < 16) do
                if([PROCESS_TABLE + i*16 + 4] == WAIT_TERMINAL) then
                        [PROCESS_TABLE + i*16 + 4] = READY;
                endif;
                i = i+1;
        endwhile;

        R0 = 0;         //successful
        return;

endif;

// for acquire disk

if(functionNum == ACQUIRE_DISK) then
	while([DISK_STATUS_TABLE+0] == 1) do
		[PROCESS_TABLE + curr_pid*16 + 4] = WAIT_DISK;
		backup;
		call MOD_5;
		restore;
	endwhile;

	[DISK_STATUS_TABLE+0] = 1;
	[DISK_STATUS_TABLE+4] = curr_pid;

	return;
endif;

// for acquire semaphore

if(functionNum == ACQUIRE_SEMAPHORE) then
	alias free_entry R0;
	alias i R4;	
	free_entry = -1;
	i = 0;
	
	while(i < MAX_SEM_COUNT) do
		if([SEMAPHORE_TABLE + i*4 + 1] == 0) then
			free_entry = i;
			[SEMAPHORE_TABLE + i*4] = -1;
			[SEMAPHORE_TABLE + i*4 + 1] = 1;
			return ;
		endif;
	i = i+1;
	endwhile;

	return ;
	
endif;

// for release semaphore

if(functionNum == RELEASE_SEMAPHORE) then
	alias semid R3;
	if([SEMAPHORE_TABLE+4*semid] == curr_pid) then
		[SEMAPHORE_TABLE + 4*semid+1] = -1;

		alias i R4;
		i = 0;
		while(i < 16) do
			if([PROCESS_TABLE+i*16+4] == WAIT_SEMAPHORE && [PROCESS_TABLE+i*16+5] == semid) then
				[PROCESS_TABLE+i*16+4] = READY;
			endif;
		i = i+1;
		endwhile;
	endif;

	[SEMAPHORE_TABLE + 4*semid+1] = [SEMAPHORE_TABLE + 4*semid + 1] - 1;

	return ;
endif;

// for acquire inode

if(functionNum == ACQUIRE_INODE) then
	alias curr_id R2;
	alias index R3;

	while([FILE_STATUS_TABLE+4*index+0] != -1) do
		[PROCESS_TABLE+16*curr_id+4] = WAIT_FILE;
		[PROCESS_TABLE+16*curr_id+5] = index;

		backup;
		call MOD_5;
		restore;
	endwhile;

	if([INODE_TABLE+index*16+1] == -1) then
		R0 = -1;
		return;
	endif;

	[FILE_STATUS_TABLE + 4*index + 0] = curr_id;

	R0 = 0;
	return;

endif;

// for release inode

if(functionNum == RELEASE_INODE) then
	alias curr_id R2;
	alias index R3;

	if([FILE_STATUS_TABLE+index*4+0] != curr_id) then
		R0 = -1;
		return;
	endif;

	[FILE_STATUS_TABLE+index*4+1] = -1;

	backup;
	alias i R5;
	i = 0;
	while(i < 16) do
		if([PROCESS_TABLE+i*16+4] == WAIT_FILE && [PROCESS_TABLE+i*16+5] == index) then
			[PROCESS_TABLE+i*16+4] = READY;
		endif;
	i = i+1;
	endwhile;
	restore;

	R0 = 0;
	return;
endif;

