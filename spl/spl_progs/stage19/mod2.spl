//R1 = functionNUm
//R2 = page num if RELEASE_PAGE


if(R1 == GET_FREE_PAGE) then
	backup;

	// INCREMENT THE WAIT MEMORY COUNT
	[SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3] + 1;

	// PUT ALL PROCESSES WITH MEM_FREE_COUNT = 0 TO WAITING STATE
	while([SYSTEM_STATUS_TABLE+2] == 0) do
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = WAIT_MEM;
		backup;
		call MOD_5; 	// SCHEDULER
		restore; 
	endwhile;
	
	// DECREASING THE WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]-1;
	
	// DECREASING THE MEM_FREE_COUNT
	[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1;

	restore;

	//find a free page using memory free list
	// MAX_MEM_PAGE = 128

	alias i R0;
	i = 76;
	while(i<MAX_MEM_PAGE) do
		if([MEMORY_FREE_LIST+i]==0) then
			[MEMORY_FREE_LIST+i] = 1;
			break;
		endif;
		i = i + 1;
	endwhile;
	
	return;

endif;

if(R1 == RELEASE_PAGE) then
	backup;
		
	alias page_num R2;
	[MEMORY_FREE_LIST + page_num] = [MEMORY_FREE_LIST + page_num] - 1;
	
	//if this page is not used by anyone	
	if([MEMORY_FREE_LIST + page_num] == 0) then
		//increment the memory free count
		[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]+1;
	endif;
	
	//update the status of processes waiting for memory
	alias i R3;
	i = 0;
	
	while(i<16) do
		if([PROCESS_TABLE+16*i+4] == WAIT_MEM) then
			[PROCESS_TABLE+16*i+4] = READY;
		endif;
		i = i + 1;
	endwhile;

	restore;			
	return;
endif;

if(R1 == GET_CODE_PAGE) then
	
        //backup;
	alias block_num R2;	//R2 contains block num
	alias i R3;
	alias block R4;
	alias page_num R0;
	
	// IF WE GET A PAGE WHICH IS ALREADY PRESENT IN MEMORY	
	i = 0;
	while(i < 16) do
		block = 4;
		while(block < 8) do
			if([DISK_MAP_TABLE + 10*i + block] == block_num && [PAGE_TABLE_BASE + 20*i + 2*(block)] != -1) then
				page_num = [PAGE_TABLE_BASE + 20*i + 2*block];
				[MEMORY_FREE_LIST + page_num] = [MEMORY_FREE_LIST + page_num] + 1;
				return;
			endif;
			block = block + 1;
		endwhile;		
	i = i+1;	
	endwhile;

	// IF NO FREE PAGE IS PRESENT AT MOMENT
	R1 = GET_FREE_PAGE;
	call MOD_2;

	R1 = DISK_LOAD;
	R4 = block_num;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = R0;	// page_num got from GET_FREE_PAGE
	call MOD_4;
	return;

endif;

if(R1 == RELEASE_BLOCK) then
	[DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
	return;
endif;
