
//------------------------------------------EXEC SYSTEM CALL---------------------------------------------

// ONLY NAME OF FILE IS PASSED AS ARGUMENT

//breakpoint;
//SAVE THE USER STACK
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;

//CHANGE SP TO POINT TO KERNEL STACK
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;

//SET THE MODE FLAG TO SYSTEM CALL NUMBER
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9;

alias userSP R0;
alias fileName R1;

userSP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];

fileName = [[PTBR + 2*((userSP - 4)/512)]*512 + (userSP - 4)%512];

alias i R2;
alias index R3;
alias flag R4;

flag = 1;


//MAX_FILE_NUM = 60. SEARCH IN INODE TABLE COPY FOR THE FILENAME
i = 0;
while(i < MAX_FILE_NUM) do
	breakpoint;
	if([INODE_TABLE + i*16] == EXEC && [INODE_TABLE + i*16 + 1] == fileName) then
		index = i;
		flag = 0;
		break;			
	endif;
	breakpoint;
i = i+1;
endwhile;

if(flag == 1) then		// NOT FOUND
	[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=0;
	[[PTBR + 2*(userSP - 1)/512]*512 + (userSP - 1)%512] = -1;
	SP = userSP;
	ireturn;	
endif;

// SET THE RETURN VALUE TO ZERO
[[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;

alias functionNum R1;
alias pid R2;

backup;
functionNum = 3;				// functionNum = 3 for EXIT_PROCESS
pid = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
restore;

// USING THE SAME PAGE FOR THE NEW PROCESS, SO MEM_FREE_LIST WILL INCCREMENT 
// THE VALUE CORRESPONDING TO user_page AND DECREMENT THE MEM_FREE_COUNT

alias user_page R5;
user_page = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];

// INCREASE THE COUNT CORRESPONDING TO THE USER PAGE
[MEMORY_FREE_LIST + user_page] = [MEMORY_FREE_LIST + user_page] + 1;

// DECREASE THE COUNT OF FREE PAGES IN MEMORY
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

// CHANGE SP TO TOP OF KERNEL STACK
SP = user_page*512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 7] = index;

PTBR = PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1];

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

backup;

//HEAP
[PTBR+4] = -1;
[PTBR+5] = "0000";

[PTBR+6] = -1;
[PTBR+7] = "0000";

//STACK
backup;
R1 = GET_FREE_PAGE;
call  MOD_2;
[PTBR+16] = R0;
[PTBR+17] = "0110";
restore;

backup;
R1 = GET_FREE_PAGE;
call  MOD_2;
[PTBR+18] = R0;
[PTBR+19] = "0110";
restore;

breakpoint;
	alias inode_index R6;
	inode_index = INODE_TABLE + index*16;
//CODE
if([INODE_TABLE+index*16+8]!=-1) then	
	
	backup;
	R1 = GET_CODE_PAGE;
	R2 = [INODE_TABLE + index*16 + 8];
	call MOD_2;
	[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1] * 20) + 8] = R0;
	[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1] * 20) + 9] = "0100";
	restore;
endif;

	//invalidate rest of code pages
[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1] * 20) + 10] = -1;
[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1] * 20) + 11] = "0000";
[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1] * 20) + 12] = -1;
[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1] * 20) + 13] = "0000";
[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1] * 20) + 14] = -1;
[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1] * 20) + 15] = "0000";

alias i R2;
i = 496;

while(i <= 510) do
	[user_page*512 + i] = -1;
	i = i+2;
endwhile;

//SET THE ENTRIES IN DISK MAP TABLE TO -1(HEAP, CODE, STACK...)
//NOTE THAT WE WILL CHANGE THE CODE SECTION BELOW
i = 0;
while(i < 10) do
	[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10 + i ] = -1;
	i = i + 1;
endwhile;

//initialise disk map table for the process
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+4] = [inode_index+8];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+5] = [inode_index+9];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+6] = [inode_index+10];
[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+7] = [inode_index+11];

//store the entry point into the user stack
[[PTBR+16]*512] = [[PTBR+8]*512+1];

//change the SP to user stack
SP = 8*512;

PTBR = PAGE_TABLE_BASE + (20 * [SYSTEM_STATUS_TABLE + 1]);
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 0;
ireturn;
